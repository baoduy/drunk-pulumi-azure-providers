import * as pulumi from '@pulumi/pulumi';
import { BaseOptions, BaseProvider, BaseResource } from './BaseProvider';
import { SqlManagementClient } from '@azure/arm-sql';
import { DefaultAzureCredential } from '@azure/identity';

interface SqlElasticPoolEncryptionInputs {
  resourceGroupName: string;
  serverName: string;
  elasticPoolName: string;
  subscriptionId: string;
  enabled: boolean;
}

interface SqlElasticPoolEncryptionOutputs
  extends SqlElasticPoolEncryptionInputs {}

class SqlElasticPoolEncryptionProvider
  implements
    BaseProvider<
      SqlElasticPoolEncryptionInputs,
      SqlElasticPoolEncryptionOutputs
    >
{
  constructor(private name: string) {}

  async create(
    inputs: SqlElasticPoolEncryptionOutputs,
  ): Promise<pulumi.dynamic.CreateResult<SqlElasticPoolEncryptionOutputs>> {
    const client = new SqlManagementClient(
      new DefaultAzureCredential(),
      inputs.subscriptionId,
    );

    client.elasticPools.beginUpdate(
      inputs.resourceGroupName,
      inputs.serverName,
      inputs.elasticPoolName,
      {},
    );

    return {
      id: this.name,
      outs: {
        ...inputs,
      },
    };
  }

  async delete(
    id: string,
    outputs: SqlElasticPoolEncryptionOutputs,
  ): Promise<void> {
    //Delete Vaults info
  }
}

export class SqlElasticPoolEncryptionResource extends BaseResource<
  SqlElasticPoolEncryptionInputs,
  SqlElasticPoolEncryptionOutputs
> {
  declare readonly name: string;

  constructor(
    name: string,
    args: BaseOptions<SqlElasticPoolEncryptionInputs>,
    opts?: pulumi.CustomResourceOptions,
  ) {
    super(
      new SqlElasticPoolEncryptionProvider(name),
      `csp:SqlElasticPoolEncryption:${name}`,
      args,
      opts,
    );
  }
}
